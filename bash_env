
# If not running interactively, don't do anything
[ -z "$PS1" ] && return

###### Variable settings #####
# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

function parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

# Input line
# https://bneijt.nl/blog/post/add-a-timestamp-to-your-bash-prompt/
# https://misc.flogisoft.com/bash/tip_colors_and_formatting
PS1="\[\e[0;96m\]\D{%T} \[\e[0;33m\]\u@\h:\[\e[1;37m\]\w \n\`if [ \$? = 0 ]; then echo \[\e[32m\]^_^\[\e[0m\]; else echo \[\e[31m\]O_o\[\e[0m\]; fi\`\[\033[36m\]\$(parse_git_branch)\[\033[00m\]\\$ "

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# change color for file names prefixing any content line
export GREP_COLORS='fn=38;5;72'

# For correcting misprint in command argument. For example: form cd /user to cd /usr
shopt -s cdspell
# For correcting misprint in command argument. For example: form cd /Usr to cd /usr
shopt -s nocaseglob

export EDITOR=vim

#tabs 2 # Был случай, что данный параметр приводил к ошибке при выполнение syncfrom_pc_snaifServer
tabs 2
####################################################################################


##### Command settings #####
# If the last character of the alias value is a space or tab character, then the next command word following the alias is also checked for alias expansion
alias sudo='sudo '  # for working commands like "sudo ll" etc.

alias git_ac='git add --no-ignore-removal . && git commit -a -m'

alias ll='ls -lah'
alias la='ls -A'
alias l='ls -CF'

alias grep='grep --color=yes'

# Convert to jpg
alias tojpg='mogrify -format jpg'

alias myip='ip addr | grep "inet " | grep -v " lo" | sed "s/.*inet\ //" | sed "s/\/.*//"'

# Calculate size of each folder in the current dir
alias duforeach='for i in *; do du -hs "$i"; done'

alias rsync='rsync -ah --info=progress2 --no-inc-recursive'
alias rm='rm -Rf'

# Copy output to xclibboard
# Ex.: cat file.txt | tobuffer
alias tobuffer='xclip -sel c'

# buffer
alias buffer_xmlformat='xclip -se c -o | xmllint --format - | xclip -sel c || echo "XML wrong format" | xclip -sel c'
alias buffer_jsonformat='xclip -se c -o | jq . | xclip -sel c || echo "JSON wrong format" | xclip -sel c'
alias buffer_concatenate='xclip -se c -o | tr -d "\n\r" | xclip -sel c'
# open kate in a new window instead a new tab
alias kate="kate -n"

# Connect to docker container
# Ex.:
#     dconn                   # connect to the latest container_id
#     dconn ae1b098df5cb      # connect to specific container id
#     dconn ae1b098df5cb 0:0  # run with user_id=0, group_id=0
function dconn() {
    container_id="$1"
    user_map="$2"

    if [[ "$1" == "" ]]; then
        container_id=$(docker ps -a | head -n 2 | tail -n 1 | awk '{print $1}')
    fi
    if [[ "$2" == "" ]]; then
        user_map="$UID:$(id -g)"
    fi

    if [ $(docker inspect -f '{{.State.Running}}' $container_id) = "false" ]; then
      echo "Container $container_id is not running. Starting it now..."
      docker start $container_id
    fi

    docker exec -u $user_map -it $container_id bash
}

# Execute "ssh-copy-id" before each "ssh" if the address isn't in cache
function ssh() {
    local cache=~/.ssh/bashrc_ssh.cache
    for cur_arg in $@; do
        if [[ "$cur_arg" == *@* ]]; then
            grep "$cur_arg" $cache &> /dev/null
            if [[ "$?" != "0" ]]; then
                ssh-copy-id $cur_arg
                echo $cur_arg >> $cache
            fi
        fi
    done
    $(which ssh) $@ # execute the init cmd "as is"
}

####################################################################################


##### snaifServer #####

export ip_parents="93.179.83.171"
export ip_tower="93.179.87.218"

# snaifServer
export ip_snaifServer="$ip_tower"

export portssh_snaifServer="2002"
alias con_snaifServer="ssh -p $portssh_snaifServer snaiffer@$ip_snaifServer"

# snaifServer2
export ip_snaifServer2="turned_off"

export portssh_snaifServer2="2002"
alias con_snaifServer2="ssh -p $portssh_snaifServer2 snaiffer@$ip_snaifServer2"

# for sshfs
export sshfs_targetPath="/stores/snaifStore_0"
export mount_dir="$HOME/snaifServer/" # using relative path '~/snaifServer' cause an error in sshfs !
alias mount_snaifServer='mkdir $mount_dir &> /dev/null; sshfs -p $portssh_snaifServer snaiffer@$ip_snaifServer:$sshfs_targetPath $mount_dir && echo -e "\n snaifServer is connected to $mount_dir \n"'
alias umount_snaifServer='fusermount -u $mount_dir'

export sshfs_targetPath2="/stores/snaifStore_1"
export mount_dir2="$HOME/snaifServer2/" # using relative path '~/snaifServer' cause an error in sshfs !
alias mount_snaifServer2='mkdir $mount_dir2 &> /dev/null; sshfs -p $portssh_snaifServer2 snaiffer@$ip_snaifServer2:$sshfs_targetPath2 $mount_dir2 && echo -e "\n snaifServer is connected to $mount_dir2 \n"'
alias umount_snaifServer2='fusermount -u $mount_dir2'
####################################################################################
